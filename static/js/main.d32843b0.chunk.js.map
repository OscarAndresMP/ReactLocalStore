{"version":3,"sources":["components/LocalRow.js","components/LocalBanner.js","components/LocalCreator.js","components/LocalVisibilityC.js","App.js","reportWebVitals.js","index.js"],"names":["LocalRow","props","local","name","type","checked","done","onChange","toggleLocal","LocalBanner","className","userName","localItems","filter","t","length","LocalCreator","useState","newlocalName","setNewlocalName","placeholder","value","e","target","onClick","createNewLocal","LocalVisibilityC","isChecked","callback","htmlFor","description","App","setLocalItems","completed","setCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","toggle","map","tableRows","localName","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAwBeA,MAtBf,SAAkBC,GAId,OACI,+BACA,6BACCA,EAAMC,MAAMC,OAEb,6BACI,uBAAOC,KAAK,WACZC,QAASJ,EAAMC,MAAMI,KACrBC,SAAW,kBAAMN,EAAMO,YAAYP,EAAMC,cAPpCD,EAAME,OCGRM,MARf,SAAqBR,GACjB,OACI,qBAAIS,UAAU,wCAAd,UACKT,EAAMU,SADX,gBACkCV,EAAMW,WAAWC,QAAO,SAAAC,GAAC,OAAKA,EAAER,QAAMS,OADxE,yBCiBOC,MAlBf,SAAsBf,GAClB,MAAwCgB,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAOA,OACI,sBAAKT,UAAU,OAAf,UACI,uBAAON,KAAK,OAAOM,UAAU,eAAeU,YAAY,gBAAgBC,MAAOH,EAAcX,SAR9E,SAACe,GAAD,OAAOH,EAAgBG,EAAEC,OAAOF,UASnD,wBAAQX,UAAU,oCAAoCc,QARnC,WACnBvB,EAAMwB,eAAeP,GACrBC,EAAgB,KAMhB,yBCGOO,MAff,SAA0BzB,GACtB,OACI,sBAAKS,UAAU,aAAf,UACA,uBAAON,KAAK,WACZM,UAAU,0BACVL,QAASJ,EAAM0B,UACfpB,SAAU,SAAAe,GAAC,OAAIrB,EAAM2B,SAASN,EAAEC,OAAOlB,YACvC,uBAAOwB,QAAQ,mBAAf,SACK5B,EAAM6B,kBCgHJC,MAnHf,WAGE,IAKA,EAAmBd,mBAAS,IAArBN,EAAP,oBACA,EAAoCM,mBAAS,CAC3C,KADF,mBAAOL,EAAP,KAAmBoB,EAAnB,KAIA,EAAkCf,oBAAS,GAA3C,mBAAOgB,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,WACR,IAAIC,EAAOC,aAAaC,QAAQ,SACrB,MAARF,GACDJ,EAAcO,KAAKC,MAAMJ,MAE3B,IAEFD,qBAAU,WACRE,aAAaI,QAAQ,QAASF,KAAKG,UAAU9B,MAC7C,CAACA,IAkCH,IAAM+B,EAAS,SAAAzC,GAAK,OAClB8B,EAAcpB,EAAWgC,KAAI,SAAA9B,GAAC,OAAKA,EAAEX,OAASD,EAAMC,KAAjB,2BAA4BW,GAA5B,IAA+BR,MAAOQ,EAAER,OAAQQ,OAE/E+B,EAAY,SAACvC,GAAD,OAChBM,EACCC,QAAO,SAAAC,GAAC,OAAIA,EAAER,OAASA,KACvBsC,KAAI,SAAA1C,GAAK,OACR,cAAC,EAAD,CAAUA,MAAOA,EAEjBM,YAAamC,GADRzC,EAAMC,UAOf,OACE,sBAAKO,UAAU,MAAf,UACA,cAAC,EAAD,CAAce,eAzEO,SAAAqB,GACjBlC,EAAWmC,MAAK,SAAAjC,GAAC,OAAIA,EAAEX,OAAS2C,MAClCd,EAAc,GAAD,mBAAKpB,GAAL,CAAiB,CAACT,KAAM2C,EAAWxC,MAAM,SAwExD,cAAC,EAAD,CAAaK,SAAUA,EAAUC,WAAYA,IAC7C,wBAAOF,UAAU,qCAAjB,UACA,gCACA,+BACI,6CACA,iDAGJ,gCACGmC,GAAU,QAGb,qBAAKnC,UAAU,0CAAf,SACE,cAAC,EAAD,CACEoB,YAAc,qBACdH,UAAWM,EACXL,SAAU,SAAAvB,GAAO,OAAI6B,EAAa7B,QAGrC4B,GACC,wBAAOvB,UAAU,qCAAjB,UACE,gCACE,+BACE,6CACA,iDAGJ,gCACGmC,GAAU,YCpGNG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d32843b0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction LocalRow(props) {\r\n\r\n    /* const deletLocal = ((e) => e.target.value);\r\n    const deleteLocal = () => props.deleteLocal(deletLocal); */\r\n    return (\r\n        <tr key={props.name}>\r\n        <td>\r\n        {props.local.name}\r\n        </td>\r\n        <td>\r\n            <input type=\"checkbox\" \r\n            checked={props.local.done} \r\n            onChange={ () => props.toggleLocal(props.local)} \r\n            />\r\n        </td>\r\n        {/* <td><button className = \"btn btn-danger btm-sm delete\" \r\n        onClick={deleteLocal}>\r\n        X</button></td> */}\r\n    </tr>\r\n    )\r\n}\r\n\r\nexport default LocalRow\r\n","import React from 'react'\r\n\r\nfunction LocalBanner(props) {\r\n    return (\r\n        <h4 className=\"bg-success text-white text-center p-4\">\r\n            {props.userName} LocalStore ({props.localItems.filter(t => !t.done).length} Tareas por hacer)\r\n        </h4>\r\n    )\r\n}\r\n\r\nexport default LocalBanner\r\n","import React from 'react'\r\nimport { useState } from \"react\";\r\n\r\nfunction LocalCreator(props) {\r\n    const [newlocalName, setNewlocalName] = useState('');\r\n    const updateNewLocal = (e) => setNewlocalName(e.target.value);\r\n    const createNewLocal = () => {\r\n        props.createNewLocal(newlocalName);\r\n        setNewlocalName('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"my-1\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Agregar tarea\" value={newlocalName} onChange={updateNewLocal}/>\r\n        <button className=\"btn btn-success my-2 form-control\" onClick={createNewLocal}>\r\n            Agregar\r\n        </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocalCreator\r\n","import React from 'react'\r\n\r\nfunction LocalVisibilityC(props) {\r\n    return (\r\n        <div className=\"form-check\">\r\n        <input type=\"checkbox\" \r\n        className=\"form-check-input-center\" \r\n        checked={props.isChecked} \r\n        onChange={e => props.callback(e.target.checked)}/>\r\n        <label htmlFor=\"form-check-label\">\r\n            {props.description}\r\n        </label>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocalVisibilityC\r\n","import { useState, useEffect } from \"react\";\nimport './bootstrap.min.css';\nimport LocalRow from './components/LocalRow';\nimport LocalBanner from \"./components/LocalBanner\";\nimport LocalCreator from \"./components/LocalCreator\";\nimport LocalVisibilityC from \"./components/LocalVisibilityC\";\n\nfunction App() {\n\n\n  const createNewLocal = localName => {\n    if(!localItems.find(t => t.name === localName)){\n      setLocalItems([...localItems, {name: localName, done: false}]);\n    }\n  }\n  const [userName] = useState('');\n  const [localItems, setLocalItems] = useState([\n    {}\n  ]);\n\n  const [completed, setCompleted] = useState(true);\n\n\n  useEffect(() =>{\n    let data = localStorage.getItem('Tasks');\n    if(data != null){\n      setLocalItems(JSON.parse(data));\n    }\n  },[]);\n\n  useEffect(() => {\n    localStorage.setItem('Tasks', JSON.stringify(localItems));\n  },[localItems]);\n\n/* \nconst deleteLocal = (localname) => {\n  let data = JSON.parse(localStorage.getItem('Tasks'));\n      data.forEach((local, index) => {\n        if(local.name === localname)\n        {   console.log(localname);\n            data.splice(index, 1);\n        }\n        else{\n          console.log(localname);\n        }\n    });\n    localStorage.setItem('Tasks', JSON.stringify(data));\n} */\n\n\n  /* useEffect(() => {\n    let data;\n    if(localStorage.getItem('Tasks') === null){\n      data = [];\n    }\n    else{\n      data = JSON.parse(localStorage.getItem('Tasks'));\n    }\n    return data;\n  });\n\n\n  useEffect(() =>{\n    localStorage.setItem('Tasks', JSON.stringify(localItems));\n  },[localItems]);\n */\n  const toggle = local => \n    setLocalItems(localItems.map(t => (t.name === local.name ? {...t, done: !t.done} : t)));\n\n  const tableRows = (done) => \n    localItems\n    .filter(t => t.done === done)\n    .map(local => (\n      <LocalRow local={local} \n      key={local.name} \n      toggleLocal={toggle} \n\n      />\n\n    ))\n\n  return (\n    <div className=\"App\">\n    <LocalCreator createNewLocal = {createNewLocal}/>\n    <LocalBanner userName={userName} localItems={localItems}/>\n    <table className=\"table table-striped table-bordered\">\n    <thead>\n    <tr>\n        <th>Descripcion</th>\n        <th>Realizadas</th>\n      </tr>\n    </thead>\n    <tbody>\n      {tableRows(false)}\n    </tbody>\n    </table>\n    <div className=\"bg-secundary-text-white text-center p-2\">\n      <LocalVisibilityC\n        description = \"Tareas Completadas\"\n        isChecked={completed}\n        callback={checked => setCompleted(checked)}\n      />\n    </div>\n    {completed &&\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Descripcion</th>\n            <th>Realizadas</th>\n          </tr>\n        </thead>\n        <tbody>\n          {tableRows(true)}\n        </tbody>\n      </table>\n    }\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}